import json
import requests
import datetime
import os
from requests_kerberos import HTTPKerberosAuth, OPTIONAL

os.environ['REQUESTS_CA_BUNDLE'] = '/ms/dist/sec/PROJ/pki/prod/truststores/GenPop-PROD/combined/pem/bundle.pem'
_auth = HTTPKerberosAuth(mutual_authentication=OPTIONAL)

def tasklist(joblist):
    jobstatus = {}
    today = datetime.datetime.now().date()
    yesterday = today - datetime.timedelta(days=1)

    for eachjob in joblist:
        print("Processing:", eachjob)
        try:
            url = f"http://bsm.webfarm.ms.com/batchstabilitymonitor/api/BatchJob/RecentRunTimes/{eachjob}"
            response = requests.get(url, timeout=300, auth=_auth)

            if response.status_code in [200, 201]:
                data = response.json()
                content = data.get("Content", [])
                target_path = data.get("TargetPath", "")
                job_name = target_path.split("/")[-1] if target_path else eachjob

                # Filter only successful jobs
                latest_entry = None
                for entry in content:
                    if entry.get("Cond Status") == "C":
                        end_datetime_str = f"{entry['End Date'].split('T')[0]} {entry['End Time']}"
                        try:
                            end_datetime = datetime.datetime.strptime(end_datetime_str, "%Y-%m-%d %H:%M:%S")
                            if not latest_entry or end_datetime > latest_entry:
                                latest_entry = end_datetime
                        except Exception as e:
                            continue

                if latest_entry:
                    formatted_end = latest_entry.strftime("%Y-%m-%d %I:%M:%S %p")
                    if latest_entry.date() in [today, yesterday]:
                        jobstatus[job_name] = ["COMPLETE", formatted_end]
                    else:
                        jobstatus[job_name] = ["WAITING", "-"]
                else:
                    jobstatus[job_name] = ["WAITING", "-"]

            else:
                print(f"Failed to fetch {eachjob}: HTTP {response.status_code}")
                jobstatus[eachjob] = ["WAITING", "-"]

        except Exception as e:
            print(f"Exception occurred for {eachjob}: {str(e)}")
            jobstatus[eachjob] = ["WAITING", "-"]

    return jobstatus
